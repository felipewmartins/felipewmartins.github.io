<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JBake</title>
    <link>http://jbake.org</link>
    <atom:link href="http://jbake.org/feed.xml" rel="self" type="application/rss+xml" />
    <description>JBake Bootstrap Template</description>
    <language>en-gb</language>
    <pubDate>Sáb, 6 set 2014 17:54:21 -0300</pubDate>
    <lastBuildDate>Sáb, 6 set 2014 17:54:21 -0300</lastBuildDate>

    
    <item>
      <title>Json para java e vice e versa.</title>
      <link>http://jbake.org/blog/2014/09/20140906.html</link>
      <pubDate>Sáb, 6 set 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/09/20140906.html</guid>
      <description>
      
&lt;p&gt;Link para um parser json e java&lt;/p&gt;&lt;br&gt;
	&lt;a href=&quot;http://www.jsonschema2pojo.org/&quot;&gt;jsonschema&lt;/a&gt;
&lt;/p&gt;




	  </description>
    </item>
    
    <item>
      <title>Configurando o ruby e o rails no xubuntu.</title>
      <link>http://jbake.org/blog/2014/08/20140624.html</link>
      <pubDate>Dom, 10 ago 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/08/20140624.html</guid>
      <description>
      
&lt;p&gt;Configurar o ruby no xubuntu&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Primeiro: Acessar o terminal e digitar o comando abaixo:&lt;br&gt;
		&lt;code&gt;\curl -sSL https://get.rvm.io | bash&lt;/code&gt;
	&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
Aguardar o download terminar. Este comando instala o rvm, para gerenciar as versões do ruby instaladas na máquina.&lt;br&gt;
&lt;ul&gt;
	&lt;li&gt;
                 Feito isso, executar o comando abaixo:&lt;br&gt;
		&lt;code&gt;rvm install ruby&lt;/code&gt;
		
	&lt;/li&gt;
&lt;/ul&gt;&lt;br&gt;
O Rvm instalará a versão mais atual do ruby, se for necessário instalar uma versão mais antiga, basta inserir a versão no final. Ex:&lt;br&gt;
&lt;ul&gt;
	&lt;li&gt;
		&lt;code&gt;rvm install 1.9.3&lt;/code&gt;&lt;br&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
Para instalar o rails, deve rodar o comando abaixo:
&lt;ul&gt;
	&lt;li&gt;
		&lt;code&gt;gemset install rails&lt;/code&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;




	  </description>
    </item>
    
    <item>
      <title>Content assist não funciona no eclipse(Xubuntu)</title>
      <link>http://jbake.org/blog/2014/07/20140714.html</link>
      <pubDate>Seg, 14 jul 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/07/20140714.html</guid>
      <description>
      
&lt;p&gt;Para corrigir este problema deve-se alterar uma configuração de entrada do xfce.&lt;/p&gt;&lt;br&gt;
No xfce:
&lt;li&gt;
	&lt;ul&gt;Acessar &lt;b&gt;Configurações&lt;/b&gt;-&gt;&lt;b&gt;Métodos de entrada de teclado&lt;/b&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;br&gt;
&lt;p&gt;Feito isso, deve-se apagar o campo &lt;b&gt;&lt;i&gt;Atalhos do teclado&lt;/i&gt;&lt;/b&gt; e reiniciar o eclipse.&lt;/p&gt;




	  </description>
    </item>
    
    <item>
      <title>Biblioteca para acesso a cpu e memória através do Java</title>
      <link>http://jbake.org/blog/2014/07/20140710.html</link>
      <pubDate>Qui, 10 jul 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/07/20140710.html</guid>
      <description>
      
&lt;p&gt;Link do Maven: &lt;/p&gt;&lt;a href=&quot;http://mvnrepository.com/artifact/org.fusesource/sigar/1.6.4&quot;&gt;SIGAR MAVEN&lt;/a&gt;&lt;/p&gt;




	  </description>
    </item>
    
    <item>
      <title>Corrigindo o erro: "method must have signature string method()" no Eclipse</title>
      <link>http://jbake.org/blog/2014/06/20140624.html</link>
      <pubDate>Ter, 24 jun 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/06/20140624.html</guid>
      <description>
      
&lt;p&gt;Corrigir erro apresentado pelo eclipse - &quot;Method must have signature string method&quot;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;
		Primeiro: Acesse o eclipse e clique em: &lt;b&gt;&lt;i&gt;Window - Preferences&lt;/i&gt;&lt;/b&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&quot;/img/posts/img-eclipse-1.png&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;
	&lt;li&gt;
		Acesse: &lt;b&gt;&lt;i&gt;Web - JavaServer Faces Tools - Validation&lt;/i&gt;&lt;/b&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;img src=&quot;/img/posts/img-eclipse-2.png&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;ul&gt;
	&lt;li&gt;
		Agora acesse: &lt;b&gt;&lt;i&gt;Type Assignment Problems - Method expression signature incompatibility&lt;/i&gt;&lt;/b&gt;&lt;br&gt;
	&lt;/li&gt;
	&lt;li&gt;
		Marque essa última opção com: &lt;b&gt;Warning ou Ignore&lt;/b&gt;
	&lt;/li&gt;
	
&lt;/ul&gt;
&lt;img src=&quot;/img/posts/img-eclipse-3.png&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p&gt;Feito isso, reinicie o eclipse e o erro estará corrigido.&lt;/p&gt;




	  </description>
    </item>
    
    <item>
      <title>Acesso a código nativo utilizando JNA</title>
      <link>http://jbake.org/blog/2014/06/20140616.html</link>
      <pubDate>Seg, 16 jun 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/06/20140616.html</guid>
      <description>
      
&lt;p&gt;Acesso a código nativo utilizando JNA&lt;/p&gt;
Até então o acesso a código nativo é feito via JNI(Java Native Interface), uma funcionalidade disponibilizada pela Sun(Hoje Oracle).
O uso de JNI para acesso aos métodos nativos é bastante complexo e exige um conhecimento inermediário em C\C++. A biblioteca JNA, encapsula os métodos de acesso a interface nativa de maneira mais simples.

&lt;p&gt;O código abaixo converte uma cadeia de caracteres para inteiro e exibe no console:&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;
	#include &lt;stdlib.h&gt;
	int main() { 
	int ano = atoi(&quot;2012&quot;); 
	printf(&quot;Hello [%s] [%d] \n&quot;, &quot;World&quot;, ano); 
	return 0; }

&lt;/code&gt;
&lt;/pre&gt;

Para compilar este código, deve usar os comandos abaixo:
&lt;pre&gt;
	&lt;code&gt;
		- Compilando e gerando o executável 
		helloWorld: gcc -o helloWorld HelloWorld.c 
		- Executando: ./helloWorld 
		Saída: Hello [World] [2012] 
	&lt;/code&gt;
&lt;/pre&gt;

Toda a função nativa que for usada no programa deverá ser declarada em uma interface.
&lt;pre class=&quot;prettyprint&quot;&gt;
	&lt;code&gt;
		import com.sun.jna.Library; 
		public interface CLibrary extends Library { 
		
		void printf(String format, Object... args); 
		int atoi(String value); 
	}

	&lt;/code&gt;
&lt;/pre&gt;
Após declarar a interface, a classe CLibrary(exemplo), fará a chamada diretamente da biblioteca correspondente ao SO, sendo DLL para windows e SO para Unix.
&lt;pre class=&quot;prettyprint&quot;&gt;
	&lt;code&gt;
		import com.sun.jna.Native; 
		public final class CLibraryFunctions { 
			private CLibrary cLibraryInstance; 
			public CLibraryFunctions() { 
				cLibraryInstance = (CLibrary)Native.loadLibrary(&quot;c&quot;, CLibrary.class); 
			} 
			public void printf(String format, Object... args) { 
			cLibraryInstance.printf(format, args); 
		} 
		public int atoi(String data) { return cLibraryInstance.atoi(data); 
	} 
}

	&lt;/code&gt;
&lt;/pre&gt;
A classe Native, possui o método loadLibrary que carrega a biblioteca correspondente do SO. Neste exemplo, foi passado como argumento, o caractere &quot;c&quot;. O Método encarrega-se de preencher o restante do nome com o prefixo &quot;lib&quot; e a extensão &quot;.so&quot;.

Feito esse processo, podemos realizar a chamada do programa principal, retornando o resultado do processo.
&lt;pre class=&quot;prettyprint&quot;&gt;
	&lt;code&gt;
		public class JNAHelloWorld { 
			public static void main(String[] args) { 
				CLibraryFunctions cLib = new CLibraryFunctions(); 
				int ano = cLib.atoi(&quot;2012&quot;); 
				cLib.printf(&quot;Hello [%s] [%d]&quot;, &quot;World&quot;, ano); 
			} 
		}
	&lt;/code&gt;
&lt;/pre&gt;
E teremos a saída, Hello [World] [2012]&lt;br&gt;

Repositório no Github: &lt;a href=&quot;https://github.com/twall/jna&quot;&gt;jna&lt;/a&gt;&lt;br&gt;
Referências: Acesso ao código nativo usando JNA (Java Native Access) &lt;a href=&quot;http://www.devmedia.com.br/acesso-ao-codigo-nativo-usando-jna-java-native-access/26535&quot;&gt;devmedia&lt;/a&gt;

	  </description>
    </item>
    
    <item>
      <title>Remover arquivos deletados do versionamento</title>
      <link>http://jbake.org/blog/2014/06/20140615.html</link>
      <pubDate>Dom, 15 jun 2014 00:00:00 -0300</pubDate>
      <guid isPermaLink="false">blog/2014/06/20140615.html</guid>
      <description>
      
&lt;p&gt;Para remover arquivos que foram versionados&lt;/p&gt;

&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;
	git ls-files --deleted | xargs git rm
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;Após isso, adicione(add.) e execute o commit novamente&lt;/p&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;
&lt;code&gt;
	git add -u
&lt;/code&gt;
&lt;/pre&gt;

	  </description>
    </item>
    

  </channel> 
</rss>
